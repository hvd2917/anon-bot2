import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# Telegram token –∑ Replit Secrets
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("–í–∫–∞–∂–∏ API_TOKEN —É Secrets Replit")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot=bot)

# —Å–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –Ω—ñ–∫—ñ–≤ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_nicks = {}   # user_id -> nick
chat_members = set()

# –∫–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! üëã –í–≤–µ–¥–∏ —Å–≤—ñ–π –Ω—ñ–∫ –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ —á–∞—Ç—É:")

# –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω—ñ–∫, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
    if user_id not in user_nicks:
        nick = message.text.strip()
        user_nicks[user_id] = nick
        chat_members.add(user_id)
        await message.answer(f"‚úÖ –¢–≤—ñ–π –Ω—ñ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {nick}\n–¢–µ–ø–µ—Ä –º–æ–∂–µ—à –ø–∏—Å–∞—Ç–∏ —É —á–∞—Ç!")
        return

    # —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—Å—ñ–º, –∫—Ä—ñ–º –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    nick = user_nicks[user_id]
    text = message.text
    for uid in chat_members:
        if uid != user_id:
            try:
                await bot.send_message(uid, f"**{nick}:** {text}", parse_mode="Markdown")
            except:
                pass

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
